import logging
import os
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

# –¢–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
BOT_TOKEN = os.getenv('8364983433:AAGM4A4_lmswx6M0Uz_0zw6cW3P5X4hesng')

def create_main_keyboard():
    keyboard = [
        [KeyboardButton("üì∏ –ö–∞—Ä—Ç–∏–Ω–∫–∞ 1"), KeyboardButton("üì∏ –ö–∞—Ä—Ç–∏–Ω–∫–∞ 2")],
        [KeyboardButton("üìù –¢–µ–∫—Å—Ç 1"), KeyboardButton("üìù –¢–µ–∫—Å—Ç 2")],
        [KeyboardButton("‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"), KeyboardButton("üéâ –°—é—Ä–ø—Ä–∏–∑")]
    ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = create_main_keyboard()
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏ –æ–¥–Ω—É –∏–∑ –∫–Ω–æ–ø–æ–∫:",
        reply_markup=keyboard
    )

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    
    if text == "üì∏ –ö–∞—Ä—Ç–∏–Ω–∫–∞ 1":
        await update.message.reply_photo(
            photo="https://via.placeholder.com/400x200/FF0000/FFFFFF?text=–ö–∞—Ä—Ç–∏–Ω–∫–∞+1",
            caption="–í–æ—Ç –ø–µ—Ä–≤–∞—è –∫–∞—Ä—Ç–∏–Ω–∫–∞! üñºÔ∏è"
        )
    
    elif text == "üì∏ –ö–∞—Ä—Ç–∏–Ω–∫–∞ 2":
        await update.message.reply_photo(
            photo="https://via.placeholder.com/400x200/0000FF/FFFFFF?text=–ö–∞—Ä—Ç–∏–Ω–∫–∞+2",
            caption="–ê –≤–æ—Ç –≤—Ç–æ—Ä–∞—è –∫–∞—Ä—Ç–∏–Ω–∫–∞! üì∏"
        )
    
    elif text == "üìù –¢–µ–∫—Å—Ç 1":
        await update.message.reply_text("–≠—Ç–æ –ø–µ—Ä–≤—ã–π —Ç–µ–∫—Å—Ç! ‚ú®")
    
    elif text == "üìù –¢–µ–∫—Å—Ç 2":
        await update.message.reply_text("–≠—Ç–æ –≤—Ç–æ—Ä–æ–π —Ç–µ–∫—Å—Ç! üìö")
    
    elif text == "‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è":
        await update.message.reply_text("‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ")
    
    elif text == "üéâ –°—é—Ä–ø—Ä–∏–∑":
        await update.message.reply_text("üéâ –°—é—Ä–ø—Ä–∏–∑! üéâ")
    
    else:
        await update.message.reply_text(
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ üëá",
            reply_markup=create_main_keyboard()
        )

async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logging.error(f"–û—à–∏–±–∫–∞: {context.error}")

def main():
    if BOT_TOKEN == "YOUR_BOT_TOKEN_HERE":
        print("‚ö†Ô∏è –ó–∞–º–µ–Ω–∏—Ç–µ BOT_TOKEN –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω!")
        return
    
    application = Application.builder().token(BOT_TOKEN).build()
    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    application.add_error_handler(error_handler)
    
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    application.run_polling()

if __name__ == "__main__":
    main()
